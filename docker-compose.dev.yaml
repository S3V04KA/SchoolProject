services:
  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=888"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.traefik.entrypoints=http"
      # - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.middlewares=auth@docker"
    networks:
      - web
      - internal
    ports:
      - "8080"
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik/traefik.yaml:/traefik.yml:ro
      - ./traefik/providers:/providers


  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: auth_db
    ports:
      - 5432
    networks:
     - internal
    volumes:
      - ./db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-be:
    build:
      context: auth_backend
      dockerfile: Dockerfile
    command: sh ./entrypoint.sh
    tty: true
    volumes:
      - ./auth_backend:/backend/
      - ./auth_backend/nginx-default.conf:/etc/nginx/sites-available/default
      - ./.docker/.ipython:/root/.ipython:cached
    environment:
      PYTHONPATH: .
      DATABASE_URL: "postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/auth_db"
      SECRET: ${SECRET}
      DOMAIN: ${DOMAIN}
      REDIS_URL: 'redis://default:${REDIS_PASSWORD}@redis:6379'
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        required: true
        condition: service_started
      redis:
        required: true
        condition: service_started
    networks:
      - internal
      - web
    ports:
      - '80'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-be.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.auth-be.service=auth-be"
      - "traefik.http.services.auth-be.loadbalancer.server.port=80"
      - "traefik.http.routers.auth-be.entrypoints=http"
      # - "traefik.http.middlewares.authz_block.stripprefix.prefixes=/api/authz"
      # - "traefik.http.routers.auth-be.middlewares=authz_block@docker"
      - 'traefik.http.middlewares.auth.forwardAuth.address=http://auth-be:80/api/authz/?url=http%3A%2F%2Fauth.${DOMAIN}%2F'
      - "traefik.http.middlewares.auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth.forwardauth.authResponseHeaders=Authorization,Set-Cookie"
      - "traefik.http.middlewares.auth.forwardauth.addAuthCookiesToResponse=token,token_type"

  
  auth-fe:
    build:
      context: auth_frontend
      dockerfile: Dockerfile
      target: dev
    command: npm run dev
    depends_on:
      - auth-be
    tty: true
    volumes:
      - ./auth_frontend:/frontend/
    ports:
      - '3000:3000'
    networks:
     - internal


  template:
    build:
      context: template_module
      dockerfile: Dockerfile
    command: sh ./entrypoint.sh
    tty: true
    volumes:
      - ./template_module:/template/
    depends_on:
      - auth-be
    ports:
      - '8001:8001'
    networks:
     - internal
     - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.template.rule=Host(`template.${DOMAIN}`)"
      - "traefik.http.routers.template.entrypoints=http"
      # - "traefik.http.routers.template.tls=true"
      # - "traefik.http.routers.template.service=api@internal"
      - "traefik.http.routers.template.middlewares=auth@docker"

networks:
  internal:
  web:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"